{{- if .Values.nginx.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "kong-aws-masking.fullname" . }}-nginx-config
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "kong-aws-masking.nginx.labels" . | nindent 4 }}
data:
  nginx.conf: |
    user nginx;
    worker_processes {{ .Values.nginx.config.workerProcesses }};
    
    error_log /var/log/nginx/error.log notice;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections {{ .Values.nginx.config.workerConnections }};
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging format for enterprise monitoring
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';
        
        log_format json_combined escape=json
          '{'
            '"time_local":"$time_local",'
            '"remote_addr":"$remote_addr",'
            '"remote_user":"$remote_user",'
            '"request":"$request",'
            '"status": "$status",'
            '"body_bytes_sent":"$body_bytes_sent",'
            '"request_time":"$request_time",'
            '"http_referrer":"$http_referer",'
            '"http_user_agent":"$http_user_agent",'
            '"upstream_connect_time":"$upstream_connect_time",'
            '"upstream_header_time":"$upstream_header_time",'
            '"upstream_response_time":"$upstream_response_time",'
            '"upstream_addr":"$upstream_addr"'
          '}';
        
        access_log /var/log/nginx/access.log {{ if eq .Values.global.environment "production" }}json_combined{{ else }}main{{ end }};
        
        # Performance optimizations
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        # Security headers
        server_tokens off;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        # Rate limiting zones
        {{- if .Values.security.enableRateLimiting }}
        limit_req_zone $binary_remote_addr zone=api_limit:10m rate={{ .Values.security.rateLimitMinute }}r/m;
        limit_req_zone $binary_remote_addr zone=api_burst:10m rate=10r/s;
        {{- end }}
        
        # Upstream for Kong Gateway
        upstream kong_backend {
            least_conn;
            {{- range $i := until (int .Values.kong.replicas) }}
            server {{ include "kong-aws-masking.kong.serviceName" $ }}.{{ $.Values.global.namespace }}.svc.cluster.local:{{ $.Values.kong.service.port }};
            {{- end }}
            
            # Health check
            keepalive 32;
            keepalive_requests 1000;
            keepalive_timeout 60s;
        }
        
        # Main server block
        server {
            listen {{ .Values.nginx.service.port }};
            server_name _;
            
            # Client settings
            client_max_body_size {{ .Values.nginx.config.clientMaxBodySize }};
            client_body_timeout 60s;
            client_header_timeout 60s;
            
            # Health check endpoint
            location /health {
                access_log off;
                return 200 '{"status":"healthy","service":"nginx","timestamp":"$time_iso8601"}';
                add_header Content-Type application/json;
            }
            
            # Status endpoint for monitoring
            location /nginx_status {
                access_log off;
                stub_status;
                allow 10.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;
            }
            
            # Main proxy location
            location / {
                {{- if .Values.security.enableRateLimiting }}
                # Rate limiting
                limit_req zone=api_limit burst=5 nodelay;
                limit_req zone=api_burst burst=10 nodelay;
                limit_req_status 429;
                {{- end }}
                
                # Proxy to Kong Gateway
                proxy_pass http://kong_backend;
                
                # Headers for Claude API
                proxy_set_header Host api.anthropic.com;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Host $server_name;
                proxy_set_header X-Request-ID $request_id;
                
                # Pass through authentication headers
                proxy_set_header Authorization $http_authorization;
                
                # Claude API key injection (from secret)
                proxy_set_header x-api-key $claude_api_key;
                
                # Timeout settings
                proxy_connect_timeout {{ .Values.nginx.config.proxyTimeout }}s;
                proxy_send_timeout {{ .Values.nginx.config.proxyTimeout }}s;
                proxy_read_timeout {{ .Values.nginx.config.proxyTimeout }}s;
                
                # Buffer settings for large responses
                proxy_buffering on;
                proxy_buffer_size 4k;
                proxy_buffers 8 4k;
                proxy_busy_buffers_size 8k;
                
                # Error handling
                proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
                proxy_next_upstream_tries 3;
                proxy_next_upstream_timeout 30s;
                
                # CORS headers for web clients
                if ($request_method = 'OPTIONS') {
                    add_header Access-Control-Allow-Origin '*';
                    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                    add_header Access-Control-Allow-Headers 'Authorization, Content-Type, x-api-key';
                    add_header Access-Control-Max-Age 1728000;
                    add_header Content-Type 'text/plain; charset=utf-8';
                    add_header Content-Length 0;
                    return 204;
                }
                
                # Add enterprise identification headers
                add_header X-Proxy-Service "nginx-enterprise" always;
                add_header X-Environment "{{ .Values.global.environment }}" always;
                add_header X-Proxy-Version "{{ .Chart.AppVersion }}" always;
            }
            
            # Error pages
            error_page 404 /404.html;
            location = /404.html {
                root /usr/share/nginx/html;
                internal;
            }
            
            error_page 500 502 503 504 /50x.html;
            location = /50x.html {
                root /usr/share/nginx/html;
                internal;
            }
        }
        
        {{- if eq .Values.global.environment "localstack" }}
        # Additional server block for debugging in LocalStack
        server {
            listen 8080;
            server_name _;
            
            location / {
                return 200 '{"message":"Nginx debug server","environment":"localstack","timestamp":"$time_iso8601"}';
                add_header Content-Type application/json;
            }
        }
        {{- end }}
    }

  # Environment-specific configuration
  claude-api.conf: |
    # Claude API specific configurations
    # This file contains environment variables and API key injection logic
    
    # Set Claude API key from environment (injected via init container)
    env CLAUDE_API_KEY;
    
    # Lua script to inject API key (if needed)
    # location /v1 {
    #     access_by_lua_block {
    #         local api_key = os.getenv("CLAUDE_API_KEY")
    #         if api_key then
    #             ngx.req.set_header("x-api-key", api_key)
    #         end
    #     }
    # }
{{- end }}