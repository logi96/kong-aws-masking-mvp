# Nginx Proxy Deployment for Kong Gateway Frontend
# High-performance HTTP proxy layer for Claude Code SDK access
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-proxy
  namespace: kong-aws-masking
  labels:
    app: nginx-proxy
    component: proxy-frontend
    version: "1.25.3-enterprise"
spec:
  replicas: 2  # High availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: nginx-proxy
  template:
    metadata:
      labels:
        app: nginx-proxy
        component: proxy-frontend
        version: "1.25.3-enterprise"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        prometheus.io/path: "/metrics"
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 101  # nginx user
        fsGroup: 101
      
      containers:
      - name: nginx-proxy
        image: nginx:1.25.3-alpine
        imagePullPolicy: IfNotPresent
        
        # Resource requirements
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Environment variables
        env:
        - name: KONG_GATEWAY_HOST
          value: "kong-gateway-service"
        - name: KONG_GATEWAY_PORT
          value: "8000"
        - name: NGINX_WORKER_PROCESSES
          value: "auto"
        - name: NGINX_WORKER_CONNECTIONS
          value: "1024"
        
        # Health and readiness probes
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 2
        
        # Ports
        ports:
        - name: http
          containerPort: 8082
          protocol: TCP
        - name: metrics
          containerPort: 9113
          protocol: TCP
        
        # Volume mounts
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: nginx-claude-proxy-config
          mountPath: /etc/nginx/conf.d/claude-proxy.conf
          subPath: claude-proxy.conf
          readOnly: true
        - name: nginx-logs
          mountPath: /var/log/nginx
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
      
      # Nginx Prometheus Exporter sidecar
      - name: nginx-exporter
        image: nginx/nginx-prometheus-exporter:0.11.0
        args:
          - "-nginx.scrape-uri=http://localhost:8082/nginx_status"
        ports:
        - name: metrics
          containerPort: 9113
          protocol: TCP
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
      
      # Volumes
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
          items:
          - key: nginx.conf
            path: nginx.conf
      - name: nginx-claude-proxy-config
        configMap:
          name: nginx-config
          items:
          - key: claude-proxy.conf
            path: claude-proxy.conf
      - name: nginx-logs
        emptyDir: {}
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      
      # Node selection and affinity
      nodeSelector:
        kubernetes.io/os: linux
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - nginx-proxy
              topologyKey: kubernetes.io/hostname
---
# Nginx Proxy Service
apiVersion: v1
kind: Service
metadata:
  name: nginx-proxy-service
  namespace: kong-aws-masking
  labels:
    app: nginx-proxy
    component: proxy-frontend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 8082
    targetPort: 8082
    protocol: TCP
  - name: metrics
    port: 9113
    targetPort: 9113
    protocol: TCP
  selector:
    app: nginx-proxy
  loadBalancerSourceRanges:
  - 0.0.0.0/0  # Allow all traffic (adjust for production security)
---
# Internal Nginx Service for cluster communication
apiVersion: v1
kind: Service
metadata:
  name: nginx-internal-service
  namespace: kong-aws-masking
  labels:
    app: nginx-proxy
    component: proxy-internal
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8082
    targetPort: 8082
    protocol: TCP
  selector:
    app: nginx-proxy
---
# Nginx Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-proxy-hpa
  namespace: kong-aws-masking
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-proxy
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60