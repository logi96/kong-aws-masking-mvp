# Backend Source Code ConfigMap
# Simplified Node.js backend for Kubernetes deployment
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-source-code
  namespace: kong-aws-masking
  labels:
    app: backend-api
    component: source-code
    version: "enterprise-v2.0.0"
data:
  # Package.json
  package.json: |
    {
      "name": "kong-aws-masking-backend",
      "version": "2.0.0-elasticache",
      "description": "Backend API for Kong AWS Masking Enterprise with ElastiCache",
      "main": "server.js",
      "scripts": {
        "start": "node server.js",
        "dev": "nodemon server.js",
        "test": "jest",
        "health": "curl http://localhost:3000/health"
      },
      "dependencies": {
        "express": "^4.18.2",
        "cors": "^2.8.5",
        "helmet": "^7.0.0",
        "morgan": "^1.10.0",
        "redis": "^4.6.0",
        "@anthropic-ai/sdk": "^0.24.3",
        "axios": "^1.6.0",
        "joi": "^17.11.0"
      },
      "devDependencies": {
        "nodemon": "^3.0.1",
        "jest": "^29.7.0"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "keywords": [
        "kong",
        "aws",
        "masking",
        "elasticache",
        "enterprise"
      ],
      "author": "Kong AWS Masking Enterprise Team",
      "license": "MIT"
    }
  
  # Main server file
  server.js: |
    #!/usr/bin/env node
    /**
     * Kong AWS Masking Enterprise Backend Server
     * EKS + ElastiCache Integration
     */
    
    const express = require('express');
    const cors = require('cors');
    const helmet = require('helmet');
    const morgan = require('morgan');
    
    const app = express();
    const PORT = process.env.PORT || 3000;
    const NODE_ENV = process.env.NODE_ENV || 'development';
    
    // Middleware
    app.use(helmet());
    app.use(cors());
    app.use(morgan('combined'));
    app.use(express.json({ limit: '10mb' }));
    app.use(express.urlencoded({ extended: true }));
    
    // Health check endpoint
    app.get('/health', (req, res) => {
      const healthCheck = {
        status: 'healthy',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        environment: NODE_ENV,
        version: '2.0.0-elasticache',
        service: 'backend-api',
        features: {
          elasticache_integration: true,
          kong_proxy_ready: true,
          aws_masking_enabled: true,
          phase1_success_integration: true
        },
        endpoints: {
          health: '/health',
          analyze: '/analyze',
          status: '/status'
        }
      };
      
      res.status(200).json(healthCheck);
    });
    
    // Status endpoint
    app.get('/status', (req, res) => {
      res.status(200).json({
        service: 'kong-aws-masking-backend',
        status: 'running',
        timestamp: new Date().toISOString(),
        proxy_endpoint: process.env.HTTP_PROXY,
        claude_base_url: process.env.ANTHROPIC_BASE_URL,
        elasticache_endpoint: process.env.ELASTICACHE_ENDPOINT,
        aws_region: process.env.AWS_REGION
      });
    });
    
    // Main analyze endpoint (simplified for K8s)
    app.post('/analyze', async (req, res) => {
      try {
        const { resources, options } = req.body;
        
        if (!resources || !Array.isArray(resources)) {
          return res.status(400).json({
            error: 'Invalid request',
            message: 'Resources array is required'
          });
        }
        
        // Simulate AWS resource analysis
        const analysisResult = {
          status: 'success',
          timestamp: new Date().toISOString(),
          resources_analyzed: resources.length,
          masking_enabled: true,
          proxy_used: !!process.env.HTTP_PROXY,
          analysis: {
            security_findings: `Analyzed ${resources.length} AWS resources through Kong masking proxy`,
            recommendations: [
              'All sensitive AWS identifiers have been masked',
              'Data processed through ElastiCache Redis',
              'Kong plugin ensures fail-secure operation'
            ],
            proxy_chain: 'Backend â†’ Kong Gateway â†’ Nginx â†’ Claude API',
            masking_plugin: 'aws-masker-elasticache-v2.0.0'
          }
        };
        
        res.status(200).json(analysisResult);
        
      } catch (error) {
        console.error('Analysis error:', error);
        res.status(500).json({
          error: 'Analysis failed',
          message: error.message,
          timestamp: new Date().toISOString()
        });
      }
    });
    
    // Test endpoint for Kong proxy validation
    app.get('/test-proxy', async (req, res) => {
      const testData = {
        service: 'backend-api',
        proxy_config: {
          http_proxy: process.env.HTTP_PROXY,
          anthropic_base_url: process.env.ANTHROPIC_BASE_URL,
          elasticache_endpoint: process.env.ELASTICACHE_ENDPOINT
        },
        test_aws_resources: [
          'i-1234567890abcdef0',
          's3://test-bucket-name',
          'vpc-abc123def456',
          '10.0.1.100'
        ],
        expected_behavior: 'AWS resources should be masked by Kong plugin',
        timestamp: new Date().toISOString()
      };
      
      res.status(200).json(testData);
    });
    
    // Metrics endpoint (basic)
    app.get('/metrics', (req, res) => {
      const metrics = {
        process: {
          uptime: process.uptime(),
          memory: process.memoryUsage(),
          pid: process.pid,
          version: process.version
        },
        system: {
          environment: NODE_ENV,
          port: PORT,
          timestamp: new Date().toISOString()
        },
        configuration: {
          elasticache_configured: !!process.env.ELASTICACHE_ENDPOINT,
          proxy_configured: !!process.env.HTTP_PROXY,
          api_key_configured: !!process.env.ANTHROPIC_API_KEY
        }
      };
      
      res.status(200).json(metrics);
    });
    
    // Error handling middleware
    app.use((err, req, res, next) => {
      console.error('Application error:', err);
      res.status(500).json({
        error: 'Internal server error',
        message: err.message,
        timestamp: new Date().toISOString()
      });
    });
    
    // 404 handler
    app.use('*', (req, res) => {
      res.status(404).json({
        error: 'Not found',
        message: `Route ${req.originalUrl} not found`,
        timestamp: new Date().toISOString()
      });
    });
    
    // Graceful shutdown
    process.on('SIGTERM', () => {
      console.log('SIGTERM received, shutting down gracefully');
      process.exit(0);
    });
    
    process.on('SIGINT', () => {
      console.log('SIGINT received, shutting down gracefully');
      process.exit(0);
    });
    
    // Start server
    app.listen(PORT, '0.0.0.0', () => {
      console.log(`ðŸš€ Kong AWS Masking Backend Server`);
      console.log(`ðŸ“¡ Port: ${PORT}`);
      console.log(`ðŸ”§ Environment: ${NODE_ENV}`);
      console.log(`ðŸ”— Proxy: ${process.env.HTTP_PROXY || 'Not configured'}`);
      console.log(`ðŸŽ¯ Claude Base URL: ${process.env.ANTHROPIC_BASE_URL || 'Not configured'}`);
      console.log(`ðŸ’¾ ElastiCache: ${process.env.ELASTICACHE_ENDPOINT || 'Not configured'}`);
      console.log(`ðŸ“‹ Health: http://localhost:${PORT}/health`);
      console.log(`âš¡ Ready for requests!`);
    });
  
  # Simple test file
  test.js: |
    /**
     * Basic tests for backend API
     */
    
    const request = require('supertest');
    const app = require('./server');
    
    describe('Backend API Tests', () => {
      test('Health endpoint should return 200', async () => {
        const response = await request(app).get('/health');
        expect(response.status).toBe(200);
        expect(response.body.status).toBe('healthy');
      });
      
      test('Status endpoint should return configuration', async () => {
        const response = await request(app).get('/status');
        expect(response.status).toBe(200);
        expect(response.body.service).toBe('kong-aws-masking-backend');
      });
      
      test('Analyze endpoint should accept resources array', async () => {
        const testData = {
          resources: ['i-123456', 's3://test-bucket'],
          options: { analysisType: 'security' }
        };
        
        const response = await request(app)
          .post('/analyze')
          .send(testData);
        
        expect(response.status).toBe(200);
        expect(response.body.status).toBe('success');
      });
    });
  
  # README for backend
  README.md: |
    # Kong AWS Masking Backend API
    
    Enterprise Node.js backend service for EKS deployment with ElastiCache integration.
    
    ## Features
    
    - Health monitoring and status endpoints
    - AWS resource analysis simulation
    - Kong proxy integration testing
    - ElastiCache configuration support
    - Graceful shutdown handling
    
    ## Endpoints
    
    - `GET /health` - Health check
    - `GET /status` - Service status and configuration
    - `POST /analyze` - AWS resource analysis
    - `GET /test-proxy` - Proxy configuration testing
    - `GET /metrics` - Basic metrics
    
    ## Environment Variables
    
    - `PORT` - Server port (default: 3000)
    - `NODE_ENV` - Environment (production/development)
    - `ANTHROPIC_API_KEY` - Claude API key
    - `ANTHROPIC_BASE_URL` - Proxy base URL
    - `HTTP_PROXY` - Proxy endpoint
    - `ELASTICACHE_ENDPOINT` - ElastiCache endpoint
    - `AWS_REGION` - AWS region
    
    ## Deployment
    
    This backend is designed for Kubernetes deployment with ConfigMap source injection.
    The source code is mounted as a read-only volume from the `backend-source-code` ConfigMap.
    
    ## Testing
    
    ```bash
    # Health check
    curl http://backend-api-service:3000/health
    
    # Test proxy configuration
    curl http://backend-api-service:3000/test-proxy
    
    # Test analysis endpoint
    curl -X POST http://backend-api-service:3000/analyze \
      -H "Content-Type: application/json" \
      -d '{"resources":["i-123","s3://test"],"options":{}}'
    ```