# Nginx Proxy Deployment for EKS Fargate
# High-performance HTTP proxy with Fargate security contexts

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-proxy-fargate
  namespace: kong-aws-masking
  labels:
    app.kubernetes.io/name: nginx-proxy
    app.kubernetes.io/part-of: kong-aws-masking-enterprise
    app.kubernetes.io/version: "1.25"
    app.kubernetes.io/component: http-proxy
    platform: eks-fargate
    compute-type: fargate
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-proxy
      platform: eks-fargate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-proxy
        app.kubernetes.io/part-of: kong-aws-masking-enterprise
        app.kubernetes.io/version: "1.25"
        app.kubernetes.io/component: http-proxy
        platform: eks-fargate
        compute-type: fargate
      annotations:
        # Fargate-specific annotations
        eks.amazonaws.com/fargate-profile: kong-aws-masking-profile
        # Security annotations
        container.apparmor.security.beta.kubernetes.io/nginx-proxy: runtime/default
        # Prometheus scraping
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: kong-aws-masking-fargate
      
      # Fargate-required security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534  # nobody user
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      # Init container for configuration validation
      initContainers:
      - name: nginx-config-validator
        image: nginx:1.25-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        command: ["nginx", "-t"]
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: nginx-proxy-config
          mountPath: /etc/nginx/conf.d
          readOnly: true
        - name: nginx-tmp
          mountPath: /tmp
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
      
      # Main containers
      containers:
      # Nginx Proxy container
      - name: nginx-proxy
        image: nginx:1.25-alpine
        imagePullPolicy: IfNotPresent
        
        # Fargate-required container security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        
        # Fargate-compliant resource requirements (0.5 vCPU, 1GB)
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1"
            memory: "2Gi"
        
        # Environment variables
        env:
        - name: NGINX_ENTRYPOINT_QUIET_LOGS
          value: "1"
        - name: TZ
          value: "Asia/Seoul"
        
        # Ports
        ports:
        - name: http-proxy
          containerPort: 8082
          protocol: TCP
        - name: health
          containerPort: 8083
          protocol: TCP
        
        # Volume mounts for writable directories
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: nginx-proxy-config
          mountPath: /etc/nginx/conf.d
          readOnly: true
        - name: nginx-tmp
          mountPath: /tmp
        - name: nginx-var-cache
          mountPath: /var/cache/nginx
        - name: nginx-var-run
          mountPath: /var/run
        - name: nginx-logs
          mountPath: /var/log/nginx
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8083
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8083
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe
        startupProbe:
          httpGet:
            path: /health
            port: 8083
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 6
      
      # Nginx Prometheus Exporter sidecar
      - name: nginx-exporter
        image: nginx/nginx-prometheus-exporter:0.11.0
        imagePullPolicy: IfNotPresent
        
        # Fargate-required container security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        
        # Resource requirements
        resources:
          requests:
            cpu: "50m"
            memory: "64Mi"
          limits:
            cpu: "100m"
            memory: "128Mi"
        
        args:
        - -nginx.scrape-uri=http://localhost:8083/nginx_status
        - -web.listen-address=:9113
        
        ports:
        - name: metrics
          containerPort: 9113
          protocol: TCP
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9113
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9113
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
      
      # Volumes (EmptyDir for Fargate compatibility)
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-main-config
          defaultMode: 0644
      - name: nginx-proxy-config
        configMap:
          name: nginx-proxy-config
          defaultMode: 0644
      # Writable volumes for readOnlyRootFilesystem
      - name: nginx-tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: nginx-var-cache
        emptyDir:
          sizeLimit: 500Mi
      - name: nginx-var-run
        emptyDir:
          sizeLimit: 50Mi
      - name: nginx-logs
        emptyDir:
          sizeLimit: 1Gi
      
      # Pod-level constraints
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
      
      # Node selection for Fargate
      nodeSelector:
        kubernetes.io/arch: amd64
        eks.amazonaws.com/compute-type: fargate
      
      # Tolerations for Fargate nodes
      tolerations:
      - key: eks.amazonaws.com/compute-type
        operator: Equal
        value: fargate
        effect: NoSchedule

---
# Nginx Proxy Service (LoadBalancer for external access)
apiVersion: v1
kind: Service
metadata:
  name: nginx-proxy-service
  namespace: kong-aws-masking
  labels:
    app.kubernetes.io/name: nginx-proxy
    app.kubernetes.io/part-of: kong-aws-masking-enterprise
    app.kubernetes.io/component: http-proxy
    platform: eks-fargate
  annotations:
    # AWS Load Balancer Controller annotations
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-target-type: "ip"
    # Health check configuration
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "HTTP"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "8083"
    # SSL/TLS annotations (for future HTTPS support)
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: nginx-proxy
    platform: eks-fargate
  ports:
  - name: http-proxy
    port: 8082
    targetPort: 8082
    protocol: TCP
  - name: health
    port: 8083
    targetPort: 8083
    protocol: TCP
  # External traffic policy for better performance
  externalTrafficPolicy: Local

---
# Nginx Internal Service (for intra-cluster communication)
apiVersion: v1
kind: Service
metadata:
  name: nginx-internal-service
  namespace: kong-aws-masking
  labels:
    app.kubernetes.io/name: nginx-proxy
    app.kubernetes.io/part-of: kong-aws-masking-enterprise
    app.kubernetes.io/component: http-proxy-internal
    platform: eks-fargate
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: nginx-proxy
    platform: eks-fargate
  ports:
  - name: http-proxy
    port: 8082
    targetPort: 8082
    protocol: TCP
  - name: health
    port: 8083
    targetPort: 8083
    protocol: TCP
  - name: metrics
    port: 9113
    targetPort: 9113
    protocol: TCP

---
# HorizontalPodAutoscaler for Nginx Proxy
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-proxy-hpa
  namespace: kong-aws-masking
  labels:
    app.kubernetes.io/name: nginx-proxy
    app.kubernetes.io/part-of: kong-aws-masking-enterprise
    platform: eks-fargate
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-proxy-fargate
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60